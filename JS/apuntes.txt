Apuntes: Explorando los Tipos de Datos en JavaScript
Objetivo Central: Entender y practicar los diferentes tipos de datos en JavaScript, utilizando variables, funciones y la consola del navegador para visualizarlos.

Pasos Clave de la Actividad:
Configuraci√≥n Inicial:

Usar un editor de texto (ej. Visual Studio Code).
Crear dos archivos: script.js (para el c√≥digo JavaScript) e index.html (para el HTML que carga el JS).
Declaraci√≥n de Variables (script.js):

Declarar variables para cada tipo de dato b√°sico de JavaScript.
Usar let o const apropiadamente.
Tipos de datos a declarar:
numeroEntero (Number)
numeroDecimal (Number)
cadenaTexto (String)
valorBooleano (Boolean)
arregloNumeros (Array)
objetoPersona (Object)
valorIndefinido (Undefined)
valorNulo (Null)
identificadorUnico (Symbol)
numeroGrande (BigInt)
Declarar una constante: const mes = "Mayo";
Funciones para Mostrar Tipos de Datos (script.js):

Crear una funci√≥n separada por cada variable declarada en el Paso 2.
Cada funci√≥n debe usar console.log() para mostrar el nombre de la variable y su valor en la consola.
Ejemplo:
JavaScript

function mostrarNumeroEntero() {
    console.log("N√∫mero Entero:", numeroEntero);
}
Funci√≥n operacion (script.js):

Crear una funci√≥n llamada operacion.
Debe recibir dos par√°metros num√©ricos.
Realizar una suma y devolver el resultado.
Ejemplo:
JavaScript

function operacion(a, b) {
    return a + b;
}
Importante: Mostrar el resultado de operacion tambi√©n usando console.log().
Ejecuci√≥n de Funciones (script.js):

Al final del archivo script.js, llamar a todas las funciones creadas en los Pasos 3 y 4. Esto asegura que se ejecuten y muestren sus resultados en la consola cuando el script se cargue.
Estructura HTML (index.html):

Crear un archivo index.html con una estructura HTML b√°sica.
Enlazar script.js justo antes de la etiqueta de cierre </body> usando <script src="script.js"></script>. Esto es crucial para que el navegador ejecute tu c√≥digo JavaScript.
Contenido m√≠nimo:
HTML

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Tipos de Datos en JavaScript</title>
</head>
<body>
    <h1>Revisa la consola del navegador</h1>
    <script src="script.js"></script>
</body>
</html>
Ejecuci√≥n y Verificaci√≥n:

Abrir index.html en un navegador web.
Abrir la consola del navegador (generalmente con F12 o clic derecho > "Inspeccionar" > pesta√±a "Consola").
Verificar que todos los valores y resultados se impriman correctamente.
Aprendizaje Clave:
Identificaci√≥n de Tipos de Datos: Reconocer c√≥mo se declaran y qu√© representan los tipos de datos fundamentales en JavaScript.
Uso de Variables: Entender la diferencia entre let (variable reasignable) y const (constante, valor fijo).
Funciones en JavaScript: Crear y llamar funciones para organizar y ejecutar c√≥digo.
console.log(): Herramienta esencial para depurar y visualizar informaci√≥n en el desarrollo web.
Conexi√≥n HTML y JavaScript: C√≥mo un archivo HTML carga y ejecuta un script JavaScript externo.
Esta actividad proporciona una base s√≥lida para entender c√≥mo JavaScript maneja y opera con la informaci√≥n.


ARREGLOS
En Java, un arreglo (array) es una estructura de datos que te permite almacenar una colecci√≥n de elementos del mismo tipo en una sola variable. Es como una secuencia de "cajas" contiguas en la memoria, donde cada caja puede guardar un valor del mismo tipo y se accede a ella mediante un n√∫mero de √≠ndice.

Qu√© son los M√©todos (Funciones) en Java?
Un m√©todo es un bloque de c√≥digo que contiene una serie de instrucciones para realizar una tarea particular. Piensa en ellos como las "acciones" o "comportamientos" que pueden tener los objetos de una clase.

Caracter√≠sticas Clave de los M√©todos en Java:
Pertenecen a Clases: A diferencia de otros lenguajes donde puedes tener funciones "sueltas", en Java, cada m√©todo debe estar definido dentro de una clase. Son una parte fundamental de la programaci√≥n orientada a objetos (POO) en Java.
Reutilizaci√≥n de C√≥digo: Permiten escribir un bloque de c√≥digo una vez y usarlo m√∫ltiples veces desde diferentes partes de tu programa, o incluso en diferentes programas. Esto reduce la redundancia y hace el c√≥digo m√°s f√°cil de mantener.
Modularidad: Dividen un programa grande en tareas m√°s peque√±as y manejables, lo que mejora la organizaci√≥n, la legibilidad y la depuraci√≥n del c√≥digo.
Par√°metros y Valores de Retorno:
Pueden aceptar par√°metros (tambi√©n llamados argumentos), que son valores de entrada que el m√©todo necesita para realizar su tarea.
Pueden devolver un valor como resultado de su ejecuci√≥n. Si un m√©todo no devuelve nada, se especifica void como su tipo de retorno.


üü° Introducci√≥n a JavaScript
JavaScript es un lenguaje de programaci√≥n que se utiliza principalmente para crear p√°ginas web interactivas y din√°micas.
 ¬øHas hecho clic en un bot√≥n y cambi√≥ algo en la p√°gina? ¬°Probablemente fue gracias a JavaScript!
üìç ¬øD√≥nde funciona JavaScript?
En el navegador (como Chrome o Firefox).


En el servidor, gracias a plataformas como Node.js.


‚úÖ Es un lenguaje vers√°til, ligero y compatible con la mayor√≠a de los navegadores modernos.

üü† Tipos de Datos en JavaScript
En JavaScript, todo lo que usamos tiene un tipo de dato. Estos se dividen en:
üîπ Primitivos (los m√°s b√°sicos):
string: Texto entre comillas.
 Ejemplo: "Hola mundo"


number: N√∫meros, ya sean enteros o con decimales.
 Ejemplo: 42, 3.14


boolean: Solo puede ser verdadero o falso.
 Ejemplo: true, false


undefined: Una variable declarada pero sin valor.
 Ejemplo: let x;


null: Representa una ausencia intencional de valor.
 Ejemplo: let y = null;


symbol: Crea un identificador √∫nico.
 ‚ûï Ejemplo:

 js

const id1 = Symbol("id");
const id2 = Symbol("id");
console.log(id1 === id2); // false
 Aunque ambos dicen "id", son completamente diferentes y √∫nicos.

 üîê Tambi√©n puede usarse como clave en un objeto:

 js

const ID = Symbol("id");
let usuario = {
  nombre: "Ana",
  [ID]: 1234
};
console.log(usuario[ID]); // 1234
bigint: N√∫meros muy grandes.
 Ejemplo: BigInt(9007199254740991)



üî∏ Objetos (m√°s complejos):
Array: Lista ordenada de valores.
 Ejemplo: [1, 2, 3]


Object: Grupo de datos con nombre (clave) y valor.
 Ejemplo:

 js

let persona = {
  nombre: "Juan",
  edad: 30
};


Function: Bloque de c√≥digo que se puede reutilizar.
 Ejemplo:

 js

function saludar() {
  console.log("Hola, mundo");
}



üü¢ ¬øPor qu√© es importante JavaScript?
JavaScript es una pieza clave del desarrollo web moderno:
üéØ Agrega interactividad (botones, animaciones, validaciones).


üîÑ Permite actualizar partes de la p√°gina sin recargarla completa.


üåê Funciona en todos los navegadores actuales.


üõ† Tiene muchas bibliotecas y frameworks populares: React, Vue, Angular.


üåç Sirve tanto en el cliente (navegador) como en el servidor (Node.js).



üîµ Variables y Constantes
Para guardar valores, usamos variables o constantes.
‚úÖ var, let y const
Palabra clave
¬øSe puede cambiar?
¬øSe puede redeclarar?
√Åmbito
var
‚úÖ S√≠
‚úÖ S√≠
Funci√≥n
let
‚úÖ S√≠
‚ùå No
Bloque
const
‚ùå No
‚ùå No
Bloque

Ejemplos:
js

var nombre = "Carlos";     // Antiguo, no recomendado
let edad = 25;             // Recomendado para datos que cambian
const PI = 3.1416;         // Para valores que no deben cambiar


Con esta base, ya est√°s listo para escribir tus primeras l√≠neas en JavaScript y comenzar a hacer p√°ginas web m√°s vivas y funcionales.


