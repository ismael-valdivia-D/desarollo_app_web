Ejercicio 5
/*‚úÖ Ejercicio 5: Mostrar la tabla de multiplicar de
un n√∫mero. Solicita al usuario un n√∫mero y
usa un for para mostrar su  tabla de
multiplicar del 1 al 10. */


function mostrarTablaMultiplicar(){
    let resultado = "";
    let numero = parseInt(prompt("Ingrese n√∫mero para trabajar: "));
    for(let i = 1; i <= 10; i++){
        let mult = numero * i;
        resultado += `<p>${numero} x ${i} = ${mult}</p>`;
    }
    document.getElementById("resultado5").innerHTML = resultado;
}
Simulaci√≥n: 
numero‚Üí: 5

Variables
Valores
resultado 
"", `<p>5 x 1 = 5</p>`,`<p>5 x 1 = 5</p><p>5 x 2 = 10</p>`, `<p>5 x 1 = 5</p><p>5 x 2 = 10</p><p>5 x 3 = 10</p>`------>
`<p>5 x 1 = 5</p><p>5 x 2 = 10</p><p>5 x 3 = 10</p`> `<p>5 x 1 = 5</p><p>5 x 2 = 10</p><p>5 x 3 = 10</p`> `<p>5 x 1 = 5</p><p>5 x 2 = 10</p><p>5 x 3 = 10</p`><p>5 x 10 = 50</p`> 
numero 
5
i
1, 2, 3, 4, 5 ,6,7,8,9,10,11
mult 
5, 10


mostrar salidas esperadas:





Ejercicio 6:
let sumaAcumulada = [];
function sumarHastaCero(){
    let suma = 0;
    let numero;
    sumaAcumulada = [];
    document.getElementById("resultado6").innerHTML = "";
    while (true) {
        numero = parseFloat(prompt("Introduce un n√∫mero para sumar (0 para terminar)"));
        if (isNaN(numero)){
            document.getElementById(resultado6).innerHTML =
            "<p>Por favor, introduce un n√∫mero valido.</p>"
            return
        }
        if (numero === 0){
            break
        }
        suma += numero
        sumaAcumulada.push(numero)
    }
    document.getElementById("resultado6").innerHTML =
    `<p>N√∫meros sumados: <strong>${sumaAcumulada.join(", ")}
    </strong><br>Total acumulado: <strong>${suma}</strong></p>`
}
Diagrama en T: Representaci√≥n gr√°fica de seguimiento de variables.

Simulaci√≥n: 
numero ‚Üí 5, 10, 6, 0 : (Input)Ingreso de valores
Ejercicio 6:
Variables
Valores
sumaAcumulada 
[], [5],[5,10],[5,10,6] 
suma 
0, 5, 15, 21
n√∫mero
undefined, 5, 10, 6, 0






mostrar salidas esperadas:
N√∫meros sumados: 5, 10, 6
Total acumulado: 21


Ejercicio 7:

let letrasPalabra = [];
function mostrarLetras() {
    let palabra = prompt("Introduce una palabra:");
    if (!palabra) {
        document.getElementById("resultado7").innerHTML = "<p>Por favor, introduce una palabra v√°lida.</p>";
        return;
    }
    letrasPalabra = []; // Reiniciar el array letrasPalabra
    document.getElementById("resultado7").innerHTML = ""; // Limpiar el contenido previo del elemento con id "resultado"
   
    for (let i = 0; i < palabra.length; i++) {
        letrasPalabra.push(palabra[i]);
    }
    document.getElementById("resultado7").innerHTML = `<p>Letras de la palabra "${palabra}": <strong>{${letrasPalabra.join(" - ")}}</strong></p>`;
}


Simulaci√≥n: 
palabra ‚Üí parangariturimicuaro: (Input)Ingreso de valores

Variables
Valores
letrasPalabra 
[]
palabra 
parangariturimicuaro










mostrar salidas esperadas:





////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Genera una cadena con n√∫meros desde 1 hasta el n√∫mero dado,
 * marcando los m√∫ltiplos de 4 con un asterisco.
 * @param {number} numero - El n√∫mero hasta el cual generar la secuencia.
 * @returns {string} La cadena de secuencia num√©rica.
 */
function mostrarSecuencia(numero) {
    if (isNaN(numero) || numero < 1) {
        return "Por favor, ingresa un n√∫mero v√°lido mayor o igual a 1.";
    }

    let secuencia = [];
    for (let i = 1; i <= numero; i++) {
        if (i % 4 === 0) {
            secuencia.push(i + "*");
        } else {
            secuencia.push(i);
        }
    }
    return secuencia.join(", ");
}

/**
 * Obtiene el n√∫mero del input, llama a mostrarSecuencia y muestra el resultado en el HTML.
 */
function ejecutarMostrarSecuencia() {
    const numeroInput = document.getElementById("numeroInput");
    const numero = parseInt(numeroInput.value);
    const resultadoDiv = document.getElementById("resultado");

    const resultadoSecuencia = mostrarSecuencia(numero);
    resultadoDiv.textContent = resultadoSecuencia;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Filtra los n√∫meros divisibles por un m√∫ltiplo dado dentro de un l√≠mite.
 *
 * @param {number} limite El n√∫mero hasta el cual se buscar√°n los m√∫ltiplos.
 * @param {number} multiplo El n√∫mero por el cual deben ser divisibles los n√∫meros.
 * @returns {Array<number>} Un arreglo con los n√∫meros encontrados.
 */
function filtrarMultiples(limite, multiplo) {
    let numerosEncontrados = [];
    for (let i = 1; i <= limite; i++) {
        if (i % multiplo === 0) {
            numerosEncontrados.push(i);
        }
    }
    return numerosEncontrados;
}

// Pedir el l√≠mite y el m√∫ltiplo al usuario
let limite = parseInt(prompt("Ingresa el n√∫mero l√≠mite:"));
let multiplo = parseInt(prompt("Ingresa el n√∫mero m√∫ltiplo:"));

// Validar que las entradas sean n√∫meros v√°lidos
if (isNaN(limite) || isNaN(multiplo)) {
    console.error("Entrada inv√°lida. Por favor, ingresa n√∫meros enteros.");
} else {
    // Llamar a la funci√≥n para filtrar los m√∫ltiplos
    let resultado = filtrarMultiples(limite, multiplo);

    // Mostrar el resultado en la consola del navegador
    if (resultado.length > 0) {
        console.log("N√∫meros encontrados: " + resultado.join(", "));
        // Optionally, display the result on the webpage (if this is in an HTML file)
        // document.body.innerHTML += "<p>N√∫meros encontrados: " + resultado.join(", ") + "</p>";
    } else {
        console.log("No se encontraron n√∫meros divisibles por " + multiplo + " hasta " + limite + ".");
        // document.body.innerHTML += "<p>No se encontraron n√∫meros divisibles por " + multiplo + " hasta " + limite + ".</p>";
    }
}


------------------------------------------------------------------------------------------------------------------------------------------
üåÄ Apunte: Bucles en JavaScript ‚Äì for y while
üéØ ¬øQu√© es un bucle?
Un bucle (o ciclo) permite repetir instrucciones varias veces sin tener que escribir el mismo c√≥digo muchas veces. Es √∫til cuando necesitamos hacer tareas repetitivas, como recorrer un arreglo o ejecutar una acci√≥n un n√∫mero determinado de veces.

üîÅ 1. Bucle for
‚úÖ ¬øCu√°ndo usarlo?
Cuando sabemos cu√°ntas veces queremos repetir una acci√≥n. Es ideal para recorrer arreglos o repetir tareas con un contador.
üß± Estructura
javascript

for (let i = 0; i < 5; i++) {
    // C√≥digo que se repite
}

Inicializaci√≥n: se ejecuta solo una vez, antes de comenzar el ciclo.


Condici√≥n: si es verdadera, se ejecuta el bloque. Si es falsa, el ciclo termina.


Incremento: se ejecuta al final de cada vuelta.


üß™ Ejemplo pr√°ctico
Imprimir los n√∫meros del 1 al 5:
javascript

for (let i = 1; i <= 5; i++) {
    console.log(i);
}


üîÅ 2. Bucle while
‚úÖ ¬øCu√°ndo usarlo?
Cuando no sabemos cu√°ntas veces se repetir√° el ciclo, y queremos repetir algo mientras se cumpla una condici√≥n.
üß± Estructura
javascript
let i = 1;
while (i < 5) {
    // C√≥digo que se repite
i++;
}

üß™ Ejemplo pr√°ctico
Mostrar un contador hasta que llegue a 3:
javascript

let contador = 1;
while (contador <= 3) {
    console.log("Vuelta " + contador);
    contador++;
}


‚ùó Precauci√≥n: bucles infinitos
Un bucle mal definido puede nunca detenerse, lo que hace que el programa se quede "pegado".
Ejemplo de bucle infinito:
javascript
let activo= true;
while (activo) {
    // Esto se repite para siempre (¬°peligroso!)
activo = false;
}


üìå Diferencias clave entre for y while
Caracter√≠stica
for
while
Uso principal
Repeticiones conocidas
Condiciones din√°micas
Estructura compacta
S√≠ (todo en una l√≠nea)
No (m√°s dispersa)
Inicializaci√≥n
Dentro del for
Antes del while
Incremento
Dentro del for
Dentro del bloque manualmente


üß† Consejo Final
Empieza usando for cuando trabajes con arreglos o necesites repetir algo un n√∫mero espec√≠fico de veces. Usa while cuando el fin del ciclo dependa de una condici√≥n que no controlas directamente (como entrada de usuario o estados externos).


-----------------------------------------------------------------------------------------------------------------------------------

 Apunte: M√©todos Fundamentales de Arreglos en JavaScript
üìå ¬øQu√© son los m√©todos de modificaci√≥n de arreglos?
Son funciones integradas en JavaScript que permiten agregar o eliminar elementos en los arreglos de forma eficiente. Los m√©todos m√°s usados son:
push()
pop()
unshift()xx
shift()



üîπ push() ‚Äì Agrega al final del arreglo
‚úÖ Descripci√≥n:
Agrega uno o m√°s elementos al final del arreglo y devuelve la nueva longitud.
üîß Sintaxis:
javascript

arreglo.push(elemento1, elemento2, ...);

üìå Ejemplo:
javascript

let frutas = ["manzana", "pl√°tano"];
frutas.push("naranja");
console.log(frutas); // ["manzana", "pl√°tano", "naranja"]

‚úÖ Buena pr√°ctica:
Evita hacer frutas[frutas.length] = "nuevo" manualmente. Usa push() para mantener claridad.

üîπ pop() ‚Äì Elimina el √∫ltimo elemento
‚úÖ Descripci√≥n:
Elimina el √∫ltimo elemento del arreglo y lo devuelve. Si el arreglo est√° vac√≠o, devuelve undefined.
üîß Sintaxis:
javascript

let eliminado = arreglo.pop();

üìå Ejemplo:
javascript

let numeros = [1, 2, 3];
let ultimo = numeros.pop();
console.log(numeros); // [1, 2]
console.log(ultimo);  // 3

‚úÖ Buena pr√°ctica:
Guarda el valor eliminado si necesitas usarlo despu√©s.

üîπ unshift() ‚Äì Agrega al inicio del arreglo
‚úÖ Descripci√≥n:
Agrega uno o m√°s elementos al inicio del arreglo y devuelve la nueva longitud.
üîß Sintaxis:
javascript

arreglo.unshift(elemento1, elemento2, ...);


üìå Ejemplo:
javascript

let colores = ["verde", "azul"];
colores.unshift("rojo");
console.log(colores); // ["rojo", "verde", "azul"]


üîπ shift() ‚Äì Elimina el primer elemento
‚úÖ Descripci√≥n:
Elimina el primer elemento del arreglo y lo devuelve. Si el arreglo est√° vac√≠o, devuelve undefined.
üîß Sintaxis:
javascript

let eliminado = arreglo.shift();

üìå Ejemplo:
javascript

let letras = ["a", "b", "c"];
let primero = letras.shift();
console.log(letras);  // ["b", "c"]
console.log(primero); // "a"


üßº Buenas pr√°cticas generales
‚úÖ Siempre verifica si el arreglo no est√° vac√≠o antes de usar pop() o shift() para evitar errores l√≥gicos.
 ‚úÖ Usa estos m√©todos en lugar de modificar manualmente √≠ndices.
 ‚úÖ Si necesitas una copia sin modificar el original, usa .slice() antes de aplicar los m√©todos.
 ‚úÖ Usa nombres de variables descriptivos (primerElemento, ultimoValor, etc.) para mantener la claridad.

üß™ Mini-ejercicio sugerido
javascript

let animales = ["perro", "gato"];
animales.push("conejo");
animales.unshift("oso");
let quitado1 = animales.pop();
let quitado2 = animales.shift();
console.log(animales);     // ¬øQu√© elementos quedan?
console.log(quitado1);     // ¬øCu√°l fue el √∫ltimo eliminado?
console.log(quitado2);     // ¬øY el primero?



